#!/usr/bin/env python

############################
# A port scanner scans and # 
#  grabs the application   #
#  banner                  #
############################

import argparse
import socket
import threading
screenLock = threading.Semaphore(value=1)
def connScan(thost, tgtPort):
	try:
		connSkt = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		connSkt.connect((thost, tgtPort))
		print("[*] Connected to {} port {}".format(thost, tgtPort))
		if connSkt.send('ViolentPython'.encode()):
			print("[*] Unable to send data to remote side")
			exit(0)
        results = connSkt.recv(100)
		if results:
			print("[-] No data received back")
			exit(0)
		screenLock.acquire()
		print("[+] %d/tcp open"% tgtPort)
		print("[+] {}".format(str(results)))
		connSkt.close()
	except:
		screenLock.acquire()
		print("[-] {}/tcp closed".format(tgtPort))
	finally:
		screenLock.release()

def portScan(thost,ports):
	try:
		tgtIp = socket.gethostbyname(thost)
	except:
		print("[-] Cannot resolve '%s': Unknown host"%thost)
		return
	try:
		tgtName = socket.gethostbyaddr(tgtIp)
		print("[*] Scan result for: {}".format(tgtName[0]))
	except:
		print("\n[*] Scan results for: {}".format(tgtIp))
	socket.setdefaulttimeout(1)

	for tgtPort in ports:
		t = threading.Thread(target=connScan, args=(thost, int(tgtPort)))
		t.start()

def main():
	parser = argparse.ArgumentParser()
	parser.add_argument("-H","--host", help=" Host to connect to")
	parser.add_argument("-p","--port", help=" Ports to be scanned", default="")
	args = parser.parse_args()
	ports = args.port.split(',')
	thost = args.host

	if (thost == None) & (ports[0] == None):
		print("[-] You must specify a target host and port[s].")
		exit(0)
	portScan(thost,ports)

if __name__ == "__main__":
	main()